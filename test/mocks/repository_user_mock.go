// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/db/repository/transaction_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	repository "github.com/FurmanovD/roommgr/internal/pkg/db/repository"
	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
)

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTransaction) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransaction)(nil).Commit))
}

// Executor mocks base method.
func (m *MockTransaction) Executor() boil.ContextExecutor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Executor")
	ret0, _ := ret[0].(boil.ContextExecutor)
	return ret0
}

// Executor indicates an expected call of Executor.
func (mr *MockTransactionMockRecorder) Executor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Executor", reflect.TypeOf((*MockTransaction)(nil).Executor))
}

// Rollback mocks base method.
func (m *MockTransaction) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransaction)(nil).Rollback))
}

// MockTxCreator is a mock of TxCreator interface.
type MockTxCreator struct {
	ctrl     *gomock.Controller
	recorder *MockTxCreatorMockRecorder
}

// MockTxCreatorMockRecorder is the mock recorder for MockTxCreator.
type MockTxCreatorMockRecorder struct {
	mock *MockTxCreator
}

// NewMockTxCreator creates a new mock instance.
func NewMockTxCreator(ctrl *gomock.Controller) *MockTxCreator {
	mock := &MockTxCreator{ctrl: ctrl}
	mock.recorder = &MockTxCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxCreator) EXPECT() *MockTxCreatorMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTxCreator) CreateTransaction(ctx context.Context) (repository.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx)
	ret0, _ := ret[0].(repository.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTxCreatorMockRecorder) CreateTransaction(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTxCreator)(nil).CreateTransaction), ctx)
}
